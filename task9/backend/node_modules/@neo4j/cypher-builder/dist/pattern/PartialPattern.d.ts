import type { CypherEnvironment } from "../Environment";
import { WithWhere } from "../clauses/mixins/sub-clauses/WithWhere";
import type { Variable } from "../references/Variable";
import { type NodePattern, type Pattern, type RelationshipPattern } from "./Pattern";
import { PatternElement } from "./PatternElement";
export interface PartialPattern extends WithWhere {
}
export type LengthOption = number | "*" | {
    min: number;
    max?: number;
} | {
    min?: number;
    max: number;
} | {
    min: number;
    max: number;
};
/** Partial pattern, cannot be used until connected to a node
 * @group Patterns
 */
export declare class PartialPattern extends PatternElement {
    private readonly length;
    private readonly direction;
    private readonly previous;
    private readonly properties;
    private readonly type;
    constructor(variable: Variable | undefined, options: RelationshipPattern, previous: Pattern);
    to(node: Variable | undefined, options?: NodePattern): Pattern;
    to(nodeConfig?: NodePattern): Pattern;
    /**
     * @internal
     */
    getCypher(env: CypherEnvironment): string;
    private generateLengthStr;
    private getTypeStr;
}
