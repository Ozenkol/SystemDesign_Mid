import type { CypherEnvironment } from "../Environment";
import type { CypherCompilable } from "../types";
import { Clause } from "./Clause";
type RawCypherCallback = (context: RawCypherContext) => [string, Record<string, unknown>] | string | undefined;
/** Allows for a raw string to be used as a clause
 * @group Other
 */
export declare class Raw extends Clause {
    private readonly callback;
    constructor(callback: RawCypherCallback | string);
    getCypher(env: CypherEnvironment): string;
    private stringToCallback;
}
export declare class RawCypherContext {
    private readonly env;
    constructor(env: CypherEnvironment);
    /** Compiles a Cypher element in the current context */
    compile(element: CypherCompilable): string;
}
export {};
